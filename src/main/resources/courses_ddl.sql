DROP TABLE IF EXISTS addresses;
DROP TABLE IF EXISTS payment_methods;
DROP TABLE IF EXISTS payment_types;
DROP TABLE IF EXISTS purchases;
DROP TABLE IF EXISTS reviews;
DROP TABLE IF EXISTS enrollments;
DROP TABLE IF EXISTS courses;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS roles;

SET FOREIGN_KEY_CHECKS = 1;

CREATE TABLE roles (
	id INT PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(70) NOT NULL, 
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	is_active BOOLEAN
);

CREATE TABLE users (
	id INT PRIMARY KEY AUTO_INCREMENT,
	first_name VARCHAR(100) NOT NULL, 
	last_name VARCHAR(100) NOT NULL, 
	genre CHAR(1),
	birth_date DATE NOT NULL,
	bio TEXT, 
	email VARCHAR(150) UNIQUE,
	password VARCHAR(200),
	role_id INT NOT NULL,
	is_active BOOLEAN,
	phone_number VARCHAR(70),
	FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE payment_types (
	id INT PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(100) NOT NULL, 
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE payment_methods (
	id INT PRIMARY KEY AUTO_INCREMENT,
	payment_type_id INT NOT NULL,
	user_id INT NOT NULL,
	clabe VARCHAR(20),
	card_number VARCHAR(20),
	card_holder_name VARCHAR(140),
	is_active BOOLEAN, 
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	FOREIGN KEY (payment_type_id) REFERENCES payment_types(id) ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE addresses (
	id INT PRIMARY KEY AUTO_INCREMENT,
	user_id INT NOT NULL,
	country VARCHAR(100) NOT NULL, 
	state VARCHAR(100) NOT NULL,
	city VARCHAR(100) NOT NULL, 
	suburb VARCHAR(140) NOT NULL,
	zipcode VARCHAR(20) NOT NULL, 
	street TEXT, 
	external_number INT, 
	internal_number INT, 
	FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE courses (
	id INT PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(150) NOT NULL UNIQUE, 
	title VARCHAR(150) NOT NULL UNIQUE,
	description TEXT, 
	price DECIMAL(10,2),
	published_at DATE, 
	is_active BOOLEAN,
	level VARCHAR(20),
	teacher_id INT NOT NULL, 
	FOREIGN KEY (teacher_id) REFERENCES users(id) ON DELETE RESTRICT ON UPDATE CASCADE 
);

CREATE TABLE purchases (
	id INT PRIMARY KEY AUTO_INCREMENT,
	course_id INT NOT NULL,
	student_id INT NOT NULL, 
	total_amount decimal(10,2),
	purchased_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	FOREIGN KEY (course_id) REFERENCES courses(id) ON DELETE RESTRICT ON UPDATE CASCADE,
	FOREIGN KEY (student_id) REFERENCES users(id) ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE enrollments (
	id INT PRIMARY KEY AUTO_INCREMENT, 
	course_id INT NOT NULL, 
	student_id INT NOT NULL, 
	status VARCHAR(20),
	started_at DATE,
	FOREIGN KEY (course_id) REFERENCES courses(id) ON DELETE RESTRICT ON UPDATE CASCADE,
	FOREIGN KEY (student_id) REFERENCES users(id) ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE reviews (
	id INT PRIMARY KEY AUTO_INCREMENT, 
	comment VARCHAR(200),
	rating int, 
	reviewed_at DATETIME DEFAULT CURRENT_TIMESTAMP, 
	student_id INT NOT NULL, 
	course_id INT NOT NULL, 
	FOREIGN KEY (student_id) REFERENCES users(id) ON DELETE RESTRICT ON UPDATE CASCADE,
	FOREIGN KEY (course_id) REFERENCES courses(id) ON DELETE RESTRICT ON UPDATE CASCADE
);